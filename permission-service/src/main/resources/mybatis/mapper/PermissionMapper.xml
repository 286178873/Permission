<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nepxion.permission.service.mapper.PermissionMapper">
    <!-- 基准的结果映射 -->
    <resultMap id="baseResultMap" type="Permission">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="label" property="label" jdbcType="VARCHAR" />
        <result column="type" property="type" jdbcType="VARCHAR" />
        <result column="description" property="description" jdbcType="VARCHAR" />
        <result column="service_name" property="serviceName" jdbcType="VARCHAR" />
        <result column="resource" property="resource" jdbcType="VARCHAR" />
        <result column="create_owner" property="createOwner" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_owner" property="updateOwner" jdbcType="VARCHAR" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    </resultMap>

    <!-- 基准的查询列 -->
    <sql id="baseColumnList">
        id, name, label, type, description, service_name, resource, create_owner, create_time, update_owner, update_time
    </sql>

    <select id="getPermission" parameterType="java.lang.Long" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from permission where id=#{id, jdbcType=BIGINT}
    </select>

    <select id="getAllPermissions" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from permission
    </select>

    <select id="getPermissions" parameterType="java.util.List" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from permission
        where id in
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{item, jdbcType=BIGINT}
        </foreach>
    </select>

    <select id="getPermissionsByServiceName" parameterType="java.lang.String" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from permission where service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="getPermissionsByTypeAndServiceName" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from permission where type=#{type, jdbcType=VARCHAR} and service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="getPermissionByNameAndTypeAndServiceName" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from permission where name=#{name, jdbcType=VARCHAR} and type=#{type, jdbcType=VARCHAR} and service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="getPermissionsByResources" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from permission where resource in 
        <foreach collection="list" item="resource" index="index" separator="," open="(" close=")">
            #{resource, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="getPermissionsByRoleId" parameterType="java.lang.Long" resultMap="baseResultMap">
        select 
            p.id,  
            p.name, 
            p.label, 
            p.type, 
            p.description,
            p.service_name,
            p.resource,
            p.create_owner, 
            p.create_time, 
            p.update_owner, 
            p.update_time 
        from permission p, role_permission r where p.id=r.permission_id and r.role_id=#{roleId, jdbcType=BIGINT}
    </select>

    <select id="getPermissionsByRoleIds" parameterType="java.lang.Long" resultMap="baseResultMap">
        select 
            p.id, 
            p.name, 
            p.label, 
            p.type, 
            p.description, 
            p.service_name,
            p.resource,
            p.create_owner, 
            p.create_time, 
            p.update_owner, 
            p.update_time 
        from permission p, role_permission r where p.id=r.permission_id and r.role_id in 
        <foreach collection="list" item="roleId" index="index" separator="," open="(" close=")">
            #{roleId, jdbcType=BIGINT}
        </foreach>
    </select> 

    <insert id="insertPermission" parameterType="Permission" useGeneratedKeys="true" keyProperty="id">
        insert into permission(id, name, label, type, description, service_name, resource, create_owner, update_owner) 
        values(#{id, jdbcType=BIGINT}, #{name, jdbcType=VARCHAR}, #{label, jdbcType=VARCHAR}, #{type, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, #{serviceName, jdbcType=VARCHAR}, #{resource, jdbcType=VARCHAR}, #{createOwner, jdbcType=VARCHAR}, #{updateOwner, jdbcType=VARCHAR})
    </insert>

    <insert id="insertUpdatePermission" parameterType="Permission" useGeneratedKeys="true" keyProperty="id">
        insert into permission(id, name, label, type, description, service_name, resource, create_owner, update_owner) 
        values(#{id, jdbcType=BIGINT}, #{name, jdbcType=VARCHAR}, #{label, jdbcType=VARCHAR}, #{type, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, #{serviceName, jdbcType=VARCHAR}, #{resource, jdbcType=VARCHAR}, #{createOwner, jdbcType=VARCHAR}, #{updateOwner, jdbcType=VARCHAR})
        on duplicate key update label=values(label), description=values(description), resource=values(resource), create_owner=values(create_owner), update_time=now(), update_owner=values(update_owner)
    </insert>

    <insert id="insertPermissions" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into permission(id, name, label, type, description, service_name, resource, create_owner, update_owner) 
        values 
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id, jdbcType=BIGINT}, #{item.name, jdbcType=VARCHAR}, #{item.label, jdbcType=VARCHAR}, #{item.type, jdbcType=VARCHAR}, #{item.description, jdbcType=VARCHAR}, #{item.serviceName, jdbcType=VARCHAR}, #{item.resource, jdbcType=VARCHAR}, #{item.createOwner, jdbcType=VARCHAR}, #{item.updateOwner, jdbcType=VARCHAR})
        </foreach>
    </insert>

    <insert id="insertUpdatePermissions" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into permission(id, name, label, type, description, service_name, resource, create_owner, update_owner) 
        values 
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id, jdbcType=BIGINT}, #{item.name, jdbcType=VARCHAR}, #{item.label, jdbcType=VARCHAR}, #{item.type, jdbcType=VARCHAR}, #{item.description, jdbcType=VARCHAR}, #{item.serviceName, jdbcType=VARCHAR}, #{item.resource, jdbcType=VARCHAR}, #{item.createOwner, jdbcType=VARCHAR}, #{item.updateOwner, jdbcType=VARCHAR})
        </foreach>
        on duplicate key update label=values(label), description=values(description), resource=values(resource), create_owner=values(create_owner), update_time=now(), update_owner=values(update_owner)
    </insert>

    <update id="updatePermission" parameterType="Permission">
        update permission
        set name=#{name, jdbcType=VARCHAR}, 
            label=#{label, jdbcType=VARCHAR}, 
            type=#{type, jdbcType=VARCHAR}, 
            description=#{description, jdbcType=VARCHAR}, 
            service_name=#{serviceName, jdbcType=VARCHAR}, 
            resource=#{resource, jdbcType=VARCHAR}, 
            create_owner=#{createOwner, jdbcType=VARCHAR}, 
            update_owner=#{updateOwner, jdbcType=VARCHAR} 
        where id=#{id, jdbcType=BIGINT}
    </update>

    <delete id="deletePermission" parameterType="java.lang.Long">
        delete from permission where id=#{id, jdbcType=BIGINT}
    </delete>

    <delete id="deletePermissions" parameterType="java.util.List">
        delete from permission 
        where id in
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{item, jdbcType=BIGINT}
        </foreach>
    </delete>

    <select id="authorize" resultType="java.lang.Long">
        select u.role_id from user_role u where u.user_id=#{userId, jdbcType=CHAR} and u.user_type=#{userType, jdbcType=CHAR} and exists (select 'a' from permission p, role_permission r where r.permission_id=p.id and p.name=#{permissionName, jdbcType=VARCHAR} and p.type=#{permissionType, jdbcType=VARCHAR} and p.service_name=#{serviceName, jdbcType=VARCHAR} and u.role_id=r.role_id)
    </select>
</mapper>