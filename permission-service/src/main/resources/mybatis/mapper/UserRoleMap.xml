<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nepxion.permission.service.mapper.UserRoleMapper">
    <!-- 基准的结果映射 -->
    <resultMap id="baseResultMap" type="UserRole">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="user_id" property="userId" jdbcType="CHAR" />
        <result column="user_type" property="userType" jdbcType="CHAR" />
        <result column="role_id" property="roleId" jdbcType="BIGINT" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="label" property="label" jdbcType="VARCHAR" />
        <result column="description" property="description" jdbcType="VARCHAR" />
        <result column="service_name" property="serviceName" jdbcType="VARCHAR" />
        <result column="create_owner" property="createOwner" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_owner" property="updateOwner" jdbcType="VARCHAR" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <association column="role_id" property="role" javaType="Role" select="com.nepxion.permission.service.mapper.RoleMapper.getRole" />
    </resultMap>

    <!-- 用户的结果映射 -->
    <resultMap id="userResultMap" type="User">
        <result column="user_id" property="userId" jdbcType="CHAR" />
        <result column="user_type" property="userType" jdbcType="CHAR" />
    </resultMap>

    <!-- 基准的查询列 -->
    <sql id="baseColumnList">
        id, user_id, user_type, role_id, name, label, description, service_name, create_owner, create_time, update_owner, update_time
    </sql>

    <!-- 用户的查询列 -->
    <sql id="userColumnList">
        user_id, user_type
    </sql>

    <select id="queryUserRole" parameterType="java.lang.Long" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from user_role where id=#{id, jdbcType=BIGINT}
    </select>

    <select id="queryUserRoles" parameterType="java.util.List" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from user_role
        where id in
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{item, jdbcType=BIGINT}
        </foreach>
    </select>

    <select id="queryAllUserRoles" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from user_role
    </select>

    <select id="queryUserRolesByServiceName" parameterType="java.lang.String" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from user_role where service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="queryUserRolesByServiceNameForIO" parameterType="java.lang.String" resultMap="baseResultMap">
        select ur.user_id userId, ur.user_type userType, r.`name` roleName, ur.`name`, ur.label, ur.description, ur.service_name serviceName, ur.create_owner createOwner, ur.update_owner updateOwner 
        from user_role ur inner join role r on ur.role_id = r.id where r.service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="queryUserRolesByUserIdAndUserTypeAndServiceName" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from user_role where user_id=#{userId, jdbcType=CHAR} and user_type=#{userType, jdbcType=CHAR} and service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="queryRoleIdsByUserIdAndUserType" resultType="java.lang.Long">
        select role_id from user_role where user_id=#{userId, jdbcType=CHAR} and user_type=#{userType, jdbcType=CHAR}
    </select>

    <select id="queryUsersByRoleId" parameterType="java.lang.Long" resultMap="userResultMap">
        select <include refid="userColumnList" /> from user_role where role_id=#{roleId, jdbcType=BIGINT}
    </select>

    <select id="queryUserRolesByPermissonId" parameterType="java.lang.Long" resultMap="baseResultMap">
        select ur.user_id, ur.user_type from permission p inner join role_permission rp on p.id = rp.permission_id inner join user_role ur on ur.role_id = rp.role_id where p.id = #{permissionId, jdbcType=BIGINT}
    </select>

    <insert id="insertUserRole" parameterType="UserRole" useGeneratedKeys="true" keyProperty="id">
        insert into user_role(id, user_id, user_type, role_id, name, label, description, service_name, create_owner, update_owner) 
        values(#{id, jdbcType=BIGINT}, #{userId, jdbcType=CHAR}, #{userType, jdbcType=CHAR}, #{roleId, jdbcType=BIGINT}, #{name, jdbcType=VARCHAR}, #{label, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, #{serviceName, jdbcType=VARCHAR}, #{createOwner, jdbcType=VARCHAR}, #{updateOwner, jdbcType=VARCHAR})
    </insert>

    <insert id="insertUpdateUserRole" parameterType="UserRole" useGeneratedKeys="true" keyProperty="id">
        insert into user_role(id, user_id, user_type, role_id, name, label, description, service_name, create_owner, update_owner) 
        values(#{id, jdbcType=BIGINT}, #{userId, jdbcType=CHAR}, #{userType, jdbcType=CHAR}, #{roleId, jdbcType=BIGINT}, #{name, jdbcType=VARCHAR}, #{label, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, #{serviceName, jdbcType=VARCHAR}, #{createOwner, jdbcType=VARCHAR}, #{updateOwner, jdbcType=VARCHAR})
        on duplicate key update label=values(label), description=values(description), create_owner=values(create_owner), update_time=now(), update_owner=values(update_owner)
    </insert>

    <insert id="insertUserRoles" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into user_role(id, user_id, user_type, role_id, name, label, description, service_name, create_owner, update_owner) 
        values 
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id, jdbcType=BIGINT}, #{item.userId, jdbcType=CHAR}, #{item.userType, jdbcType=CHAR}, #{item.roleId, jdbcType=BIGINT}, #{item.name, jdbcType=VARCHAR}, #{item.label, jdbcType=VARCHAR}, #{item.description, jdbcType=VARCHAR}, #{item.serviceName, jdbcType=VARCHAR}, #{item.createOwner, jdbcType=VARCHAR}, #{item.updateOwner, jdbcType=VARCHAR})
        </foreach>
    </insert>

    <insert id="insertUpdateUserRoles" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into user_role(id, user_id, user_type, role_id, name, label, description, service_name, create_owner, update_owner) 
        values 
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id, jdbcType=BIGINT}, #{item.userId, jdbcType=CHAR}, #{item.userType, jdbcType=CHAR}, #{item.roleId, jdbcType=BIGINT}, #{item.name, jdbcType=VARCHAR}, #{item.label, jdbcType=VARCHAR}, #{item.description, jdbcType=VARCHAR}, #{item.serviceName, jdbcType=VARCHAR}, #{item.createOwner, jdbcType=VARCHAR}, #{item.updateOwner, jdbcType=VARCHAR})
        </foreach> on duplicate key update label=values(label), description=values(description), create_owner=values(create_owner), update_time=now(), update_owner=values(update_owner)
    </insert>

    <update id="updateUserRole" parameterType="UserRole">
        update user_role
        set name=#{name, jdbcType=VARCHAR}, 
            label=#{label, jdbcType=VARCHAR}, 
            description=#{description, jdbcType=VARCHAR}, 
            service_name=#{serviceName, jdbcType=VARCHAR}, 
            create_owner=#{createOwner, jdbcType=VARCHAR}, 
            update_owner=#{updateOwner, jdbcType=VARCHAR} 
        where id=#{id, jdbcType=BIGINT}
    </update>

    <delete id="deleteUserRole" parameterType="java.lang.Long">
        delete from user_role where id=#{id, jdbcType=BIGINT}
    </delete>

    <delete id="deleteUserRoleByUserIdAndUserTypeAndRoleId">
        delete from user_role where user_id=#{userId, jdbcType=CHAR} and user_type=#{userType, jdbcType=CHAR} and role_id=#{roleId, jdbcType=BIGINT}
    </delete>

    <delete id="deleteUserRolesByUserIdAndUserType">
        delete from user_role where user_id=#{userId, jdbcType=CHAR} and user_type=#{userType, jdbcType=CHAR}
    </delete>

    <delete id="deleteUserRoles" parameterType="java.util.List">
        delete from user_role 
        where 
        <foreach collection="list" item="item" index="index" separator="or">
            (user_id=#{item.userId, jdbcType=CHAR} and user_type=#{item.userType, jdbcType=CHAR} and role_id=#{item.roleId, jdbcType=BIGINT})
        </foreach>
    </delete>

    <select id="containsRole" parameterType="java.lang.Long" resultType="java.lang.Long">
        select count(1) from user_role where role_id=#{roleId, jdbcType=BIGINT}
    </select>
</mapper>