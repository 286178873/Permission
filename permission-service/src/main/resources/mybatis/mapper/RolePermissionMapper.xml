<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nepxion.permission.service.mapper.RolePermissionMapper">
    <!-- 基准的结果映射 -->
    <resultMap id="baseResultMap" type="RolePermission">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="role_id" property="roleId" jdbcType="BIGINT" />
        <result column="permission_id" property="permissionId" jdbcType="BIGINT" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="label" property="label" jdbcType="VARCHAR" />
        <result column="description" property="description" jdbcType="VARCHAR" />
        <result column="service_name" property="serviceName" jdbcType="VARCHAR" />
        <result column="create_owner" property="createOwner" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_owner" property="updateOwner" jdbcType="VARCHAR" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <association column="role_id" property="role" javaType="Role" select="com.nepxion.permission.service.mapper.RoleMapper.getRole" />
        <association column="permission_id" property="permission" javaType="Permission" select="com.nepxion.permission.service.mapper.PermissionMapper.getPermission" />
    </resultMap>

    <!-- 基准的查询列 -->
    <sql id="baseColumnList">
        id, role_id, permission_id, name, label, description, service_name, create_owner, create_time, update_owner, update_time
    </sql>

    <select id="getRolePermission" parameterType="java.lang.Long" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from role_permission where id=#{id, jdbcType=BIGINT}
    </select>

    <select id="getAllRolePermissions" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from role_permission
    </select>

    <select id="getRolePermissions" parameterType="java.util.List" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from role_permission
        where id in
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{item, jdbcType=BIGINT}
        </foreach>
    </select>

    <select id="getRolePermissionsByServiceName" parameterType="java.lang.String" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from role_permission where service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="getRolePermissionsByServiceNameForIO" parameterType="java.lang.String" resultMap="baseResultMap">
        select r.`name` roleName, p.`name` permissionName, p.type permissionType, rp.`name`, rp.label , rp.description, rp.service_name serviceName, rp.create_owner createOwner, rp.update_owner updateOwner 
        from role_permission rp inner join role r on rp.role_id = r.id inner join permission p on rp.permission_id = p.id 
        where rp.service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="getRolePermissionsByRoleIdAndServiceName" resultMap="baseResultMap">
        select <include refid="baseColumnList" /> from role_permission where role_id=#{roleId, jdbcType=BIGINT} and service_name=#{serviceName, jdbcType=VARCHAR}
    </select>

    <select id="getPermissionIdsByRoleId" parameterType="java.lang.Long" resultType="java.lang.Long">
        select permission_id from role_permission where role_id=#{roleId, jdbcType=BIGINT}
    </select>

    <select id="getRoleIdsByPermissionId" parameterType="java.lang.Long" resultType="java.lang.Long">
        select role_id from role_permission where permission_id=#{permissionId, jdbcType=BIGINT}
    </select>

    <insert id="insertRolePermission" parameterType="RolePermission" useGeneratedKeys="true" keyProperty="id">
        insert into role_permission(id, role_id, permission_id, name, label, description, service_name, create_owner, update_owner) 
        values(#{id, jdbcType=BIGINT}, #{roleId, jdbcType=BIGINT}, #{permissionId, jdbcType=BIGINT}, #{name, jdbcType=VARCHAR}, #{label, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, #{serviceName, jdbcType=VARCHAR}, #{createOwner, jdbcType=VARCHAR}, #{updateOwner, jdbcType=VARCHAR})
    </insert>

    <insert id="insertUpdateRolePermission" parameterType="RolePermission" useGeneratedKeys="true" keyProperty="id">
        insert into role_permission(id, role_id, permission_id, name, label, description, service_name, create_owner, update_owner)
        values(#{id, jdbcType=BIGINT}, #{roleId, jdbcType=BIGINT}, #{permissionId, jdbcType=BIGINT}, #{name, jdbcType=VARCHAR}, #{label, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, #{serviceName, jdbcType=VARCHAR}, #{createOwner, jdbcType=VARCHAR}, #{updateOwner, jdbcType=VARCHAR})
        on duplicate key update label=values(label), description=values(description), create_owner=values(create_owner), update_time=now(), update_owner=values(update_owner)
    </insert>

    <insert id="insertRolePermissions" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into role_permission(id, role_id, permission_id, name, label, description, service_name, create_owner, update_owner) 
        values 
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id, jdbcType=BIGINT}, #{item.roleId, jdbcType=BIGINT}, #{item.permissionId, jdbcType=BIGINT}, #{item.name, jdbcType=VARCHAR}, #{item.label, jdbcType=VARCHAR}, #{item.description, jdbcType=VARCHAR}, #{item.serviceName, jdbcType=VARCHAR}, #{item.createOwner, jdbcType=VARCHAR}, #{item.updateOwner, jdbcType=VARCHAR})
        </foreach>
    </insert>

    <insert id="insertUpdateRolePermissions" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into role_permission(id, role_id, permission_id, name, label, description, service_name, create_owner, update_owner) 
        values 
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id, jdbcType=BIGINT}, #{item.roleId, jdbcType=BIGINT}, #{item.permissionId, jdbcType=BIGINT}, #{item.name, jdbcType=VARCHAR}, #{item.label, jdbcType=VARCHAR}, #{item.description, jdbcType=VARCHAR}, #{item.serviceName, jdbcType=VARCHAR}, #{item.createOwner, jdbcType=VARCHAR}, #{item.updateOwner, jdbcType=VARCHAR})
        </foreach> on duplicate key update label=values(label), description=values(description), create_owner=values(create_owner), update_time=now(), update_owner=values(update_owner)
    </insert>

    <update id="updateRolePermission" parameterType="RolePermission">
        update role_permission
        set name=#{name, jdbcType=VARCHAR}, 
            label=#{label, jdbcType=VARCHAR}, 
            description=#{description, jdbcType=VARCHAR}, 
            service_name=#{serviceName, jdbcType=VARCHAR}, 
            create_owner=#{createOwner, jdbcType=VARCHAR}, 
            update_owner=#{updateOwner, jdbcType=VARCHAR} 
        where id=#{id, jdbcType=BIGINT}
    </update>

    <delete id="deleteRolePermission" parameterType="java.lang.Long">
        delete from role_permission where id=#{id, jdbcType=BIGINT}
    </delete>

    <delete id="deleteRolePermissionByRoleIdAndPermissionId">
        delete from role_permission where role_id=#{roleId, jdbcType=BIGINT} and permission_id=#{permissionId, jdbcType=BIGINT}
    </delete>

    <delete id="deleteRolePermissionByRoleId">
        delete from role_permission where role_id=#{roleId, jdbcType=BIGINT}
    </delete>

    <delete id="deleteRolePermissions" parameterType="java.util.List">
        delete from role_permission 
        where 
        <foreach collection="list" item="item" index="index" separator="or">
            (role_id=#{item.roleId, jdbcType=BIGINT} and permission_id=#{item.permissionId, jdbcType=BIGINT})
        </foreach>
    </delete>

    <select id="containsRole" parameterType="java.lang.Long" resultType="java.lang.Long">
        select count(1) from role_permission where role_id=#{roleId, jdbcType=BIGINT}
    </select>

    <select id="containsPermission" parameterType="java.lang.Long" resultType="java.lang.Long">
        select count(1) from role_permission where permission_id=#{permissionId, jdbcType=BIGINT}
    </select>
</mapper>